# ====== Rules for aligning reads with bowtie2 =================================


# Align trimmed reads with bowtie2
rule bowtie:
    input:
        R1 = RESULTS + "/{sample}/{sample}_R1_trim.fastq.gz"
    output:
        sam   = temp_fn(RESULTS + "/{sample}/{sample}.sam"),
        bam   = temp_fn(RESULTS + "/{sample}/{sample}.bam"),
        bai   = temp_fn(RESULTS + "/{sample}/{sample}.bam.bai"),
        stats = RESULTS + "/{sample}/{sample}_bowtie_stats.txt"
    params:
        job_name = "{sample}_bowtie",
        idx      = INDEX,
        mapq     = 10
    resources:
        mem_gb = _get_mem(3)
    log:
        out = RESULTS + "/logs/{sample}_bowtie.out",
        err = RESULTS + "/logs/{sample}_bowtie.err"
    threads: 
        12
    shell:
        """
        # By default bowtie2 performs end-to-end alignment
        # By default bowtie2 searches for multiple alignments and reports the best one
        bowtie2 \
            -p {threads} \
            -x '{params.idx}' \
            -U '{input.R1}' \
            -S '{output.sam}' \
            2> '{output.stats}'

        cat '{output.sam}' \
            | samtools view -q {params.mapq} -b - \
            | samtools sort -O bam - \
            > '{output.bam}'

        samtools index '{output.bam}'
        """


# Combine bowtie2 summaries
rule bowtie_summary:
    input:
        expand(
            RESULTS + "/{sample}/{sample}_bowtie_stats.txt",
            sample = SAMS_UNIQ
        )
    output:
        RESULTS + "/stats/" + PROJ + "_bowtie.tsv"
    params:
        job_name = PROJ + "_bowtie_summary",
    resources:
        mem_gb = _get_mem(0.125)
    log:
        out = RESULTS + "/logs/" + PROJ + "_bowtie_summary.out",
        err = RESULTS + "/logs/" + PROJ + "_bowtie_summary.err"
    threads:
        1
    shell:
        """
        python - << 'EOF'
import sys
sys.path.insert(0, "{SRC}/rules")

import rules

rules._bowtie_summary("{input}".split(), "{output[0]}")
EOF
        """


