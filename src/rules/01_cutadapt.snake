# ===== Snakefile for trimming and filtering NET-seq reads =====================


# Trim reads with cutadapt
rule cutadapt:
    input:
        _get_fq_paths
    output:
        R1    = temp_fn(RESULTS + "/{sample}/{sample}_R1_trim.fastq.gz"),
        R2    = temp_fn(RESULTS + "/{sample}/{sample}_R2_trim.fastq.gz"),
        stats = RESULTS + "/{sample}/{sample}_cutadapt_stats.txt"
    params:
        job_name = "{sample}_cutadapt",
        args     = CMD_PARAMS["cutadapt"],
        seq1     = READ_1_ADAPTER,
        seq2     = READ_2_ADAPTER
    resources:
        mem_gb = _get_mem(2)
    log:
        out = RESULTS + "/logs/{sample}_cutadapt.out",
        err = RESULTS + "/logs/{sample}_cutadapt.err"
    threads:
        6
    shell:
        """
        cutadapt \
            {params.args} \
            -a {params.seq1} \
            -A {params.seq2} \
            -j {threads} \
            -o '{output.R1}' \
            -p '{output.R2}' \
            '{input[0]}' \
            '{input[1]}' \
            > '{output.stats}'
        """


# Create cutadapt summary
rule cutadapt_summary:
    input:
        expand(
            RESULTS + "/{sample}/{sample}_cutadapt_stats.txt",
            sample = SAMS_UNIQ
        )
    output:
        RESULTS + "/stats/" + PROJ + "_cutadapt.tsv"
    params:
        job_name = PROJ + "_cutadapt_summary"
    resources:
        mem_gb = _get_mem(0.125)
    log:
        out = RESULTS + "/logs/" + PROJ + "_cutadapt_summary.out",
        err = RESULTS + "/logs/" + PROJ + "_cutadapt_summary.err"
    threads:
        1
    shell:
        """
        python - << 'EOF'
import sys
sys.path.insert(0, "{SRC}")

import rules

rules._cutadapt_summary("{input}".split(), "{output[0]}")
EOF
        """


