# ===== Snakefile for trimming and filtering NET-seq reads =====================


# Extract UMI sequence
# The UMI is the first 12 bases of read 2. By default umi_tools assumes
# the given UMI pattern starts at the 5' end of the read. To account for
# this read 2 is provided with -I and read 1 is provided with --read2-in.
rule extract_umi:
    input:
        _get_fq_paths
    output:
        R1  = temp_fn(RESULTS + "/{sample}/{sample}_R1_umi.fastq.gz"),
        R2  = temp_fn(RESULTS + "/{sample}/{sample}_R2_umi.fastq.gz"),
        log = RESULTS + "/logs/{sample}_extract_umi.out"
    params:
        job_name = "{sample}_umi_extract",
        memory   = MEMORY,
        umi_pat  = CMD_PARAMS["umi_pattern"]
    log:
        out = RESULTS + "/logs/{sample}_extract_umi.out",
        err = RESULTS + "/logs/{sample}_extract_umi.err"
    message:
        "Extracting UMIs for {wildcards.sample}"
    threads:
        1
    shell:
        """
        umi_tools extract \
            -I {input[1]} \
            --extract-method=string \
            --bc-pattern={params.umi_pat} \
            --read2-in={input[0]} \
            --read2-out={output.R1} \
            -L {output.log} \
            | gzip \
            > {output.R2}
        """


# Trim reads with cutadapt
rule cutadapt:
    input:
        R1 = RESULTS + "/{sample}/{sample}_R1_umi.fastq.gz",
        R2 = RESULTS + "/{sample}/{sample}_R2_umi.fastq.gz"
    output:
        R1    = temp_fn(RESULTS + "/{sample}/{sample}_R1_trim.fastq.gz"),
        R2    = temp_fn(RESULTS + "/{sample}/{sample}_R2_trim.fastq.gz"),
        stats = RESULTS + "/{sample}/{sample}_cutadapt_stats.txt"
    params:
        job_name = "{sample}_cutadapt",
        memory   = MEMORY * 2,
        args     = CMD_PARAMS["cutadapt"],
        seq1     = READ_1_ADAPTER,
        seq2     = READ_2_ADAPTER
    log:
        out = RESULTS + "/logs/{sample}_cutadapt.out",
        err = RESULTS + "/logs/{sample}_cutadapt.err"
    message:
        "Running cutadapt on {wildcards.sample}"
    threads:
        6
    shell:
        """
        cutadapt \
            {params.args} \
            -a {params.seq1} \
            -A {params.seq2} \
            -j {threads} \
            -o {output.R1} \
            -p {output.R2} \
            {input.R1} \
            {input.R2} \
            > {output.stats}
        """


# Create cutadapt summary
rule cutadapt_summary:
    input:
        expand(
            RESULTS + "/{sample}/{sample}_cutadapt_stats.txt",
            sample = SAMS_UNIQ
        )
    output:
        RESULTS + "/stats/" + PROJ + "_cutadapt.tsv"
    params:
        job_name = PROJ + "_cutadapt_summary",
        memory   = 4
    log:
        out = RESULTS + "/logs/" + PROJ + "_cutadapt_summary.out",
        err = RESULTS + "/logs/" + PROJ + "_cutadapt_summary.err"
    message:
        "Creating " + PROJ + " cutadapt summary"
    threads:
        1
    shell:
        """
        python - << 'EOF'
import sys
sys.path.insert(0, "src/rules")

import rules

rules._cutadapt_summary("{input}".split(), "{output[0]}")
EOF
        """


