# ====== Rules for aligning reads with bowtie2 =================================


# Align trimmed reads with bowtie2
rule bowtie:
    input:
        R1 = RESULTS + "/{sample}/{sample}_R1_trim.fastq.gz"
    output:
        unmap     = RESULTS      + "/{sample}/{sample}_unmap.fastq.gz",
        alt_sam   = temp(RESULTS + "/{sample}/{sample}_alt.sam"),
        alt_bam   = RESULTS      + "/{sample}/{sample}_alt.bam",
        alt_stats = RESULTS      + "/{sample}/{sample}_alt_bowtie_stats.txt",
        sam       = temp(RESULTS + "/{sample}/{sample}.sam"),
        bam       = RESULTS      + "/{sample}/{sample}.bam",
        bai       = RESULTS      + "/{sample}/{sample}.bam.bai",
        stats     = RESULTS      + "/{sample}/{sample}_bowtie_stats.txt"
    params:
        job_name = "{sample}_bowtie",
        memory   = 64,
        alt_idx  = ALT_INDEX,
        idx      = INDEX,
        mapq     = 5
    log:
        out = RESULTS + "/logs/{sample}_bowtie.out",
        err = RESULTS + "/logs/{sample}_bowtie.err"
    message:
        "Aligning reads with Bowtie2 for {wildcards.sample}"
    threads: 
        12
    shell:
        """
        bowtie2 \
            -p {threads} \
            -x {params.alt_idx} \
            -U {input.R1} \
            --un {output.unmap} \
            -S {output.alt_sam} \
            2> {output.alt_stats}

        bowtie2 \
            -p {threads} \
            -x {params.idx} \
            -U {output.unmap} \
            -S {output.sam} \
            2> {output.stats}

        cat {output.alt_sam} \
            | samtools view -q {params.mapq} -b - \
            | samtools sort -O bam - \
            > {output.alt_bam}

        cat {output.sam} \
            | samtools view -q {params.mapq} -b - \
            | samtools sort -O bam - \
            > {output.bam}

        samtools index {output.bam}
        """


# Combine bowtie2 summaries
rule bowtie_summary:
    input:
        sam = expand(
            RESULTS + "/{sample}/{sample}_bowtie_stats.txt",
            sample = SAMPLES
        ),
        inp = expand(
            RESULTS + "/{sample}/{sample}_bowtie_stats.txt",
            sample = INPUTS
        )
    output:
        RESULTS + "/stats/" + PROJ + "_bowtie.tsv"
    params:
        job_name = PROJ + "_bowtie_summary",
        memory   = 4
    log:
        out = RESULTS + "/logs/" + PROJ + "_bowtie_summary.out",
        err = RESULTS + "/logs/" + PROJ + "_bowtie_summary.err"
    message:
        "Creating " + PROJ + " bowtie2 summary"
    threads:
        1
    run:
        def _write_summary(file, lib_type, out_file):
            with open(out_file, "a") as out:
                name = os.path.basename(file)
                name = re.sub("_bowtie_stats.txt", "", name)
 
                for line in open(file, "r"):
                    line  = re.sub("; of these:", "", line.strip())
                    line  = re.sub(" \([0-9\.%]+\)", "", line)
                    words = line.split(" ")
                    num   = words[0]
                    met   = words[1:]
                    met   = " ".join(met)
 
                    out.write("%s\t%s\t%s\t%s\n" % (name, lib_type, met, num))

        for sam, inp in zip(input.sam, input.inp):
            _write_summary(sam, "NET", output[0])
            _write_summary(inp, "INPUT", output[0])


