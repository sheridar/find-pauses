# ====== Rules for making stranded sense matrices =======================


# Split genes by strand
rule split_matrix_genes:
    input:
        META_MATRIX_BED
    output:
        p_genes = temp(RESULTS + "/" + PROJ + "_matrix_genes_pos.bed"),
        n_genes = temp(RESULTS + "/" + PROJ + "_matrix_genes_neg.bed")
    params:
        job_name = PROJ + "_split_matrix_genes"
    resources:
        mem_mb = _get_mem(0.25, 1000),
        mem_gb = _get_mem(0.25)
    log:
        out = RESULTS + "/logs/" + PROJ + "_matrix_genes.out",
        err = RESULTS + "/logs/" + PROJ + "_matrix_genes.err"
    threads:
        1
    shell:
        """
        zcat {input} \
            | awk '$6 == "+"' \
            > {output.p_genes}

        zcat {input} \
            | awk '$6 == "-"' \
            > {output.n_genes}
        """


# Create matrices for metaplots
rule create_metaplot_matrices:
    input:
        p_bw    = RESULTS + "/{sample}/{sample}_pos.bw",
        n_bw    = RESULTS + "/{sample}/{sample}_neg.bw",
        p_genes = RESULTS + "/" + PROJ + "_matrix_genes_pos.bed",
        n_genes = RESULTS + "/" + PROJ + "_matrix_genes_neg.bed"
    output:
        S_matrix  = RESULTS +  "/{sample}/meta_matrices/{sample}_{ref}_{start}_{end}_{bin}_matrix_S.gz",
        AS_matrix = RESULTS +  "/{sample}/meta_matrices/{sample}_{ref}_{start}_{end}_{bin}_matrix_AS.gz",
        p_tmp = temp(RESULTS + "/{sample}/meta_matrices/{sample}_{ref}_{start}_{end}_{bin}_pos.gz"),
        n_tmp = temp(RESULTS + "/{sample}/meta_matrices/{sample}_{ref}_{start}_{end}_{bin}_neg.gz")
    params:
        job_name = "{sample}_{ref}_{start}_{end}_{bin}_matrix",
        args     = CMD_PARAMS["computeMatrix"]
    resources:
        mem_mb = _get_mem(0.5, 1000),
        mem_gb = _get_mem(0.5)
    log:
        out = RESULTS + "/logs/{sample}_{ref}_{start}_{end}_{bin}_matrix.out",
        err = RESULTS + "/logs/{sample}_{ref}_{start}_{end}_{bin}_matrix.err"
    threads: 
        12
    shell:
        """
        create_matrices() {{
            local bw="$1"
            local genes="$2"
            local out="$3"

            computeMatrix reference-point \
                {params.args} \
                --referencePoint {wildcards.ref} \
                --upstream {wildcards.start} \
                --downstream {wildcards.end} \
                --binSize {wildcards.bin} \
                -p {threads} \
                -S "$bw" \
                -R "$genes" \
                -o "$out"
        }}

        # Create sense matrices
        create_matrices \
            '{input.p_bw}' \
            '{input.p_genes}' \
            '{output.p_tmp}'

        create_matrices \
            '{input.n_bw}' \
            '{input.n_genes}' \
            '{output.n_tmp}'

        computeMatrixOperations rbind \
            -m '{output.p_tmp}' '{output.n_tmp}' \
            -o '{output.S_matrix}'

        # Create antisense matrices
        create_matrices \
            '{input.n_bw}' \
            '{input.p_genes}' \
            '{output.p_tmp}'

        create_matrices \
            '{input.p_bw}' \
            '{input.n_genes}' \
            '{output.n_tmp}'

        computeMatrixOperations rbind \
            -m '{output.p_tmp}' '{output.n_tmp}' \
            -o '{output.AS_matrix}'
        """


# Make URLs and transfer to sandbox
rule create_matrix_urls:
    input:
        expand(
            expand(
                RESULTS + "/{{sample}}/meta_matrices/{{sample}}_{ref}_{start}_{end}_{bin}_matrix_{{strand}}.gz",
                zip,
                ref   = META_MATRIX_PARAMS[0],
                start = META_MATRIX_PARAMS[1],
                end   = META_MATRIX_PARAMS[2],
                bin   = META_MATRIX_PARAMS[3]
            ),
            sample = SAMS_UNIQ,
            strand = ["S", "AS"]
        )
    output:
        urls = RESULTS + "/urls/" + PROJ + "_matrix_urls.tsv"
    params:
        job_name = PROJ + "_matrix_urls",
        **SSH_PARAMS
    resources:
        mem_mb = _get_mem(0.25, 1000),
        mem_gb = _get_mem(0.25)
    log:
        out = RESULTS + "/logs/" + PROJ + "_matrix_urls.out",
        err = RESULTS + "/logs/" + PROJ + "_matrix_urls.err"
    threads:
        1
    shell:
        """
        source '{SRC}/funs.sh'

        create_urls \
            '{input}' \
            '{params.ssh}' \
            '{params.ssh_key_dir}' \
            '{params.url}' \
            '{output.urls}'
        """


