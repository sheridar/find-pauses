# ====== Rules for subsampling reads ===========================================


# Clear persistent dictionary used for subsampling
# to be safe this will clear any existing dictionary
rule subsample_dict:
    output:
        temp(touch(DICT_DIR + "/subsample_dict.txt"))
    params:
        job_name = "subsample_dict",
        memory   = 2
    log:
        out = RESULTS + "/logs/subsample_dict.out",
        err = RESULTS + "/logs/subsample_dict.err"
    threads:
        1
    shell:
        """
        python - << 'EOF'
from pytools.persistent_dict import PersistentDict

SUB_DICT = PersistentDict("SUB_DICT", container_dir = "{SUB_DICT_DIR}")

SUB_DICT.clear()
EOF
        """


# Identify number of reads to use for subsampling each group
# use uuid to ensure unique dictionary name
rule subsample_1:
    input:
        DICT_DIR + "/subsample_dict.txt",

        lambda wildcards: expand(
            RESULTS + "/{sample}/{sample}_shift.bed.gz",
            sample = SAMPLES[wildcards.group]
        )
    output:
        temp(RESULTS + "/stats/{group}_summary.tsv")
    params:
        job_name = "{group}_summary",
        memory   = MEMORY * 3
    log:
        out = RESULTS + "/logs/{group}_summary.out",
        err = RESULTS + "/logs/{group}_summary.err"
    benchmark:
        RESULTS + "/benchmarks/{group}_summary.tsv"
    message:
        "Subsampling reads for {wildcards.group}"
    threads:
        1
    shell:
        """
        python - << 'EOF'
# Identify file with smallest number of reads
from pytools.persistent_dict import PersistentDict
import gzip
import os

SUB_DICT = PersistentDict("SUB_DICT", container_dir = "{SUB_DICT_DIR}")

d = dict()

# Remove first input which contains dict info
input = "{input}".split()

del input[0]

for file in input:
    f  = gzip.open(file)
    c  = 0
    nm = os.path.basename(file)
    nm = re.sub("_shift.bed.gz", "", nm)

    for l in f:
        c += 1

    if nm not in d:
        d[nm] = c

min_reads = min(d.values())

SUB_DICT.store("{wildcards.group}", min_reads)

with open("{output[0]}", "w") as out:
    for k in d.keys():
        out.write("%s\t%s\tFiltered reads\t%s\n" % ("{wildcards.group}", k, d[k]))
        out.write("%s\t%s\tSampled reads\t%s\n" % ("{wildcards.group}", k, min_reads))
EOF
        """


# Subsample libraries to equalize read counts for downstream analysis
rule subsample_2:
    input:
        bed  = RESULTS  + "/{sample}/{sample}_shift.bed.gz",
        sum  = RESULTS  + "/stats/{group}_summary.tsv",
        dict = DICT_DIR + "/subsample_dict.txt"
    output:
        RESULTS + "/{sample}-{group}/{sample}-{group}.bed.gz"
    params:
        job_name = "{sample}_{group}",
        memory   = MEMORY * 3
    log:
        out = RESULTS + "/logs/{sample}_{group}.out",
        err = RESULTS + "/logs/{sample}_{group}.err"
    benchmark:
        RESULTS + "/benchmarks/{sample}_{group}.tsv"
    message:
        "Subsampling reads for {wildcards.sample} {wildcards.group}"
    threads:
        16
    shell:
        """
        MIN_READS=$(python - << 'EOF'
from pytools.persistent_dict import PersistentDict

SUB_DICT  = PersistentDict("SUB_DICT", container_dir = "{SUB_DICT_DIR}")
MIN_READS = SUB_DICT.fetch("{wildcards.group}")

print(MIN_READS)
EOF
        )

        zcat {input.bed} \
            | shuf -n $MIN_READS \
            | sort -S1G --parallel={threads} -k1,1 -k2,2n \
            | pigz -p {threads} \
            > {output}
        """


# Create subsampling summary
# also need to clear persistent dict
rule sub_summary:
    input:
        expand(
            RESULTS + "/stats/{group}_summary.tsv",
            group = GRPS_UNIQ
        )
    output:
        RESULTS + "/stats/" + PROJ + "_subsample.tsv"
    params:
        job_name = PROJ + "_subsample_summary",
        memory   = 4
    log:
        out = RESULTS + "/logs/" + PROJ + "_subsample_summary.out",
        err = RESULTS + "/logs/" + PROJ + "_subsample_summary.err"
    message:
        "Creating " + PROJ + " subsampling summary"
    threads:
        1
    shell:
        """
        python - << 'EOF'
from pytools.persistent_dict import PersistentDict

SUB_DICT = PersistentDict("SUB_DICT", container_dir = "{SUB_DICT_DIR}")

SUB_DICT.clear()
EOF

            file_arr=({input})
    
            for file in ${{file_arr[@]}}
            do
                cat $file \
                    >> {output}
            done
        """


