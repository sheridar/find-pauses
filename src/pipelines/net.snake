# ===== Snake file for processing mNET-seq data ================================


# Configure shell for all rules
shell.executable("/bin/bash")
shell.prefix("source ~/.bash_profile; set -o nounset -o pipefail -o errexit -x; ")


# Python packages
from pytools.persistent_dict import PersistentDict
import os
import glob
import re


# Add genome specific config
GENOME = config["GENOME"]

GENOME_CONFIG = "src/configs/" + GENOME + ".yaml"

if not os.path.exists(GENOME_CONFIG):
    sys.exit("ERROR: " + GENOME + " is not a valid GENOME selection.")

configfile:
    GENOME_CONFIG


# Include intermediate files
if config["KEEP_INTERMEDIATE_FILES"]:
    def temp_fn(file):
        return(file)

else:
    temp_fn = temp


# Docker container
container:
    config["CONTAINER"]


# Functions for pipeline
include: "../rules/funs.py"


# Parameters from config.yaml
PROJ        = config["PROJ"]
RAW_DATA    = config["RAW_DATA"]
RESULTS     = config["RESULTS"]
ALL_SAMPLES = config["SAMPLES"]
INDEX       = config["INDEX"]
CHROMS      = config["CHROMS"]
GTF         = config["GTF"]
GENES       = config["GENES"]
MASK        = config["MASK"]
MEMORY      = config["MEMORY"]
URL         = config["URL"]
SSH         = config["SSH"]
SSH_KEY_DIR = config["SSH_KEY_DIR"]
CMD_PARAMS  = config["CMD_PARAMS"]
TEST_GENES  = config["TEST_GENES"]

GENE_SUB_BEDS = config["GENE_SUBSAMPLE_BEDS"]
META_BEDS     = config["META_BEDS"]


# Directories for data and scripts
FASTQ_DIR = RESULTS + "/fastqs"
SRC = "src"


# Files for metaplots
GENE_SUB_REGS = list(GENE_SUB_BEDS.keys())

if GENE_SUB_REGS & META_BEDS.keys():
    sys.exit("ERROR: META_BEDS and GENE_SUBSAMPLE_BEDS must have different labels. Files provided by GENE_SUBSAMPLE_BEDS will get added to META_BEDS.")

META_BEDS.update(dict(GENE_SUB_BEDS))

REGIONS = list(META_BEDS.keys())


# Scripts to compile
SCRIPTS = glob.glob(SRC + "/*.cpp")
SCRIPTS = [os.path.splitext(os.path.basename(script))[0] for script in SCRIPTS]


# Simplify ALL_SAMPLES dictionary
# subsampling groups can be listed in multiple sections
# collapse sections and combine subsampling groups
SAMPLES = {}

for _, d in ALL_SAMPLES.items():
    for key, value in d.items():

        if not isinstance(value, dict):
            value = {key: value}  # make it a dictionary for uniformity

        for _, sub_value in value.items():
            if key in SAMPLES:
                if sub_value not in SAMPLES[key]:
                    SAMPLES[key].append(sub_value)

            else:
                SAMPLES[key] = [sub_value]


# Sample and group lists
# do not use list(set()) since need to maintain order
SAMS = [[y, x] for y in SAMPLES for x in SAMPLES[y]]
GRPS = [x[0] for x in SAMS]
SAMS = [x[1] for x in SAMS]

def _get_uniq_list(list_in):
    seen = set()
    out = []
    
    for item in list_in:
        if item not in seen:
            seen.add(item)
            out.append(item)

    return(out)

GRPS_UNIQ = _get_uniq_list(GRPS)
SAMS_UNIQ = _get_uniq_list(SAMS)


# Gene subsampling groups
SAM_GRPS      = [x + "-" + y for y in SAMPLES for x in SAMPLES[y]]
GENE_SUB_GRPS = [x + "_" + y for x in SAM_GRPS for y in GENE_SUB_REGS]
GENE_SUB_GRPS = SAM_GRPS + GENE_SUB_GRPS


# Print summary of samples and groups
print("SAMS (%s): %s\n" % (len(SAMS), SAMS))
print("GRPS (%s): %s\n" % (len(GRPS), GRPS))
print("SAMS_UNIQ (%s): %s\n" % (len(SAMS_UNIQ), SAMS_UNIQ))
print("GRPS_UNIQ (%s): %s\n" % (len(GRPS_UNIQ), GRPS_UNIQ))
print("SAM_GRPS (%s): %s\n" % (len(SAM_GRPS), SAM_GRPS))

print("GENE_SUB_BEDS (%s): %s\n" % (len(GENE_SUB_BEDS), GENE_SUB_BEDS))

print("GENE_SUB_GRPS (%s): %s\n" % (len(GENE_SUB_GRPS), GENE_SUB_GRPS))


# Wildcard constraints
GRP_REGEX = "[a-zA-Z0-9\-]+"

wildcard_constraints:
    region  = "[a-zA-Z0-9\-]+",
    reads   = "[a-zA-Z]+",
    length  = "[a-zA-Z]+",
    sample  = "[a-zA-Z0-9_]+",
    group   = GRP_REGEX,
    sam_grp = "[a-zA-Z0-9_\-]+-[a-zA-Z0-9_\-]+",

    win          = "[0-9]+",
    stren        = "(_(?!sep).*_)",
    stren_grp    = "(_(?!sep).*_|_)",
    pause_region = "[a-zA-Z0-9\-]+"


# Create symlinks for fastqs
if not os.path.exists(FASTQ_DIR):
    os.makedirs(FASTQ_DIR)

FASTQS = [_get_fqs(x, RAW_DATA, FASTQ_DIR) for x in SAMS_UNIQ]
FASTQS = sum(FASTQS, [])


# Pausing pipeline
include: "pauses.snake"


# Final output files
rule all:
    input:
        # Compile scripts
        expand(
            SRC + "/{script}",
            script = SCRIPTS
        ),

        # FastQC
        RESULTS + "/stats/" + PROJ + "_fastqc.tsv",

        # Cutadapt
        RESULTS + "/stats/" + PROJ + "_cutadapt.tsv",

        # Bowtie2
        RESULTS + "/stats/" + PROJ + "_bowtie.tsv",
        
        # De-duplication
        RESULTS + "/stats/" + PROJ + "_dedup.tsv",
        
        # FeatureCounts
        RESULTS + "/" + PROJ + "_featureCounts.tsv",

        # Filtering summary
        RESULTS + "/stats/" + PROJ + "_filt.tsv",

        # Sample subsampling
        expand(
            RESULTS + "/{sample}-{group}/{sample}-{group}.bed.gz",
            zip, sample = SAMS, group = GRPS
        ),

        RESULTS + "/stats/" + PROJ + "_subsample.tsv",
        
        # Gene subsampling
        expand(
            RESULTS + "/stats/{group}_{sub_region}_summary.tsv",
            group = GRPS_UNIQ, sub_region = GENE_SUB_REGS
        ),

        # Bigwigs without subsampling
        RESULTS + "/urls/" + PROJ + "_nosub_igv.xml",

        # Bigwigs with subsampling
        expand(
            RESULTS + "/{sam_grp}/{sam_grp}_neg.bw",
            sam_grp = GENE_SUB_GRPS
        ),

        RESULTS + "/urls/" + PROJ + "_igv.xml",

        # Metaplots without subsampling
        expand(
            RESULTS + "/{sample}/metaplot_beds/{sample}_{region}_S_N.bed.gz",
            sample = SAMS, region = REGIONS
        ),

        # Metaplots with subsampling
        expand(
            RESULTS + "/{sam_grp}/metaplot_beds/{sam_grp}_{region}_S_N.bed.gz",
            sam_grp = GENE_SUB_GRPS, region = REGIONS
        ),

        # Gene subsampling test
        expand(
            RESULTS + "/stats/{group}_{sub_region}_test.tsv",
            group = GRPS_UNIQ, sub_region = GENE_SUB_REGS
        ),

        # Library subsampling test
        expand(
            RESULTS + "/stats/{group}_test.tsv",
            group = GRPS_UNIQ
        ),

        # Pauses
        expand(
            RESULTS + "/{sam_grp}/pauses/{sam_grp}_{win}_pauses.bed.gz",
            sam_grp = GENE_SUB_GRPS, win = WIN_SIZE
        ),

        expand(
            RESULTS + "/stats/" + PROJ + "_{win}{stren_grp}pausing.tsv",
            sam_grp = GENE_SUB_GRPS, win = WIN_SIZE, stren_grp = ALL_STREN_GRPS
        ),

        expand(
            RESULTS + "/{sam_grp}/pauses/{sam_grp}_{win}{stren_grp}pause_reads.bed.gz",
            sam_grp = GENE_SUB_GRPS, win = WIN_SIZE, stren_grp = ALL_STREN_GRPS
        ),

        # Pause density metaplot bed files
        expand(
            RESULTS + "/{sam_grp}/pauses/{sam_grp}_{win}{stren_grp}pauses_{pause_region}.bed.gz",
            sam_grp = GENE_SUB_GRPS, win = WIN_SIZE, stren_grp = ALL_STREN_GRPS, pause_region = PAUSE_REGIONS
        ),

        # Signal around pauses
        expand(
            RESULTS + "/{sam_grp}/pauses/{sam_grp}_{win}{stren_grp}pauses_meta_N.bed.gz",
            sam_grp = GENE_SUB_GRPS, win = WIN_SIZE, stren_grp = ALL_STREN_GRPS
        )

       #  # Plots
       #  RESULTS + "/" + PROJ + "_analysis.html"


# Setup code for pipeline
include: "../rules/00_setup.snake"

# Run FastQC
include: "../rules/01_fastqc.snake"

# Run cutadapt
include: "../rules/01_cutadapt.snake"

# Align reads with bowtie2
include: "../rules/02_bowtie.snake"

# Remove PCR duplicates with UMI-tools
include: "../rules/03_dedup.snake"

# Run featureCounts
include: "../rules/04_featureCounts.snake"

# Files without subsampling
include: "../rules/04_metaplots_nosub.snake"
include: "../rules/05_bigwigs_nosub.snake"

# Sample subsampling
include: "../rules/04_subsample.snake"

# Gene subsampling
include: "../rules/05_gene_subsample.snake"

# Create bigwigs
include: "../rules/06_bigwigs.snake"

# Create bed files for metaplots
include: "../rules/06_metaplots_stranded.snake"

# Test output files
include: "../rules/07_test.snake"

# Generate plots
include: "../rules/08_plots.snake"


