#===== Snake pipeline for identifying pauses from mNET-seq data ================


# Configure shell for all rules
shell.executable("/bin/bash")
shell.prefix("set -o nounset -o pipefail -o errexit -x; ")


# Parameters from config.yaml
PROJ    = config["PROJ"]
RESULTS = config["RESULTS"]
MEMORY  = config["MEMORY"]
CHROMS  = config["CHROMS"]

PAUSE_GENES     = config["PAUSE_GENES"]
PAUSE_MASK      = config["PAUSE_MASK"]
PAUSE_MASK      = ",".join(PAUSE_MASK)
WIN_SIZE        = config["WIN_SIZE"]
STRENGTH_GROUPS = config["STRENGTH_GROUPS"]
PAUSE_ROUND     = config["PAUSE_ROUND"]

GENE_SUB_BEDS   = config["GENE_SUBSAMPLE_BEDS"]
PAUSE_META_BEDS = config["PAUSE_META_BEDS"]


# Files for metaplots
# need gene subsampling parameters so these results are included in pipeline
if list(GENE_SUB_BEDS.keys()) & PAUSE_META_BEDS.keys():
    sys.exit("ERROR: PAUSE_META_BEDS and GENE_SUBSAMPLE_BEDS must have different labels. Files provided by GENE_SUBSAMPLE_BEDS will get added to PAUSE_META_BEDS.")

PAUSE_META_BEDS.update(dict(GENE_SUB_BEDS))

PAUSE_REGIONS = list(PAUSE_META_BEDS.keys())


# Directory with required scripts
try:
    SRC

except NameError:
    SRC = "src"
 

# Sample and group lists
# only set these variables if they were not already set by master
# pipeline
try:
    GENE_SUB_GRPS

except NameError:
    SAMPLES       = config["SAMPLES"]
    GENE_SUB_REGS = list(GENE_SUB_BEDS.keys())
    GENE_SUB_GRPS = [x + "-" + y for y in SAMPLES for x in SAMPLES[y]]
    GENE_SUB_GRPS = [x + "_" + y for x in GENE_SUB_GRPS for y in GENE_SUB_REGS]
    GENE_SUB_GRPS = SAMPLES + GENE_SUB_GRPS


# Pausing strength parameters
def _create_dict(keys, values):
    if (len(keys) != len(values)) & (len(values) != 1):
        sys.exit("ERROR: For pause strength parameters must provide a single value or a value for each group.")

    if len(values) == 1:
        values = [values] * len(keys)

    d = dict(zip(keys, values))

    return(d)

PAUSE_ROUND = _create_dict(STRENGTH_GROUPS, PAUSE_ROUND)


# Add label for unfiltered pauses ("_")
ALL_STREN_GRPS = STRENGTH_GROUPS.copy()
ALL_STREN_GRPS.append("_")


# # Wildcard constraints
# # for stren exclude "_sep_" but allow "_"
# wildcard_constraints:
#     win          = "[0-9]+",
#     stren        = "(_(?!sep).*_)",
#     stren_grp    = "(_(?!sep).*_|_)",
#     pause_region = "[a-zA-Z0-9\-]+"


# # Final output files
# rule all:
#     input:
#         # Identify pauses
#         expand(
#             RESULTS + "/{sam_grp}/pauses/{sam_grp}_{win}_pauses.bed.gz",
#             sam_grp = GENE_SUB_GRPS, win = WIN_SIZE
#         ),
# 
#         expand(
#             RESULTS + "/{sam_grp}/pauses/{sam_grp}_{win}{stren}pauses.bed.gz",
#             sam_grp = GENE_SUB_GRPS, win = WIN_SIZE, stren = STRENGTH_GROUPS
#         ),
# 
#         expand(
#             RESULTS + "/stats/" + PROJ + "_{win}{stren_grp}pausing.tsv",
#             sam_grp = GENE_SUB_GRPS, win = WIN_SIZE, stren_grp = ALL_STREN_GRPS
#         ),
# 
#         expand(
#             RESULTS + "/{sam_grp}/pauses/{sam_grp}_{win}{stren_grp}pause_reads.bed.gz",
#             sam_grp = GENE_SUB_GRPS, win = WIN_SIZE, stren_grp = ALL_STREN_GRPS
#         ),
# 
#         # Pause density metaplot bed files
#         expand(
#             RESULTS + "/{sam_grp}/pauses/{sam_grp}_{win}{stren_grp}pauses_{pause_region}.bed.gz",
#             sam_grp = GENE_SUB_GRPS, win = WIN_SIZE, stren_grp = ALL_STREN_GRPS, pause_region = PAUSE_REGIONS
#         ),
# 
#         # Signal around pauses
#         expand(
#             RESULTS + "/{sam_grp}/pauses/{sam_grp}_{win}{stren_grp}pauses_meta_N.bed.gz",
#             sam_grp = GENE_SUB_GRPS, win = WIN_SIZE, stren_grp = ALL_STREN_GRPS
#         )


# Identify pause sites
include: "../rules/08_find_pauses.snake"


